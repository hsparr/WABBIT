; WABBIT parameter file template.
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)

[Domain]
; 2D or 3D problem?
dim=2;
domain_size=0.1786 0.111 0;

[Blocks]
; size of each block, should be odd (17, 33, 65 etc)
number_block_nodes=33;129;17;33;
; ghost nodes for each block
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=0.3e2;1e-4;
; treelevel bounds
min_treelevel=1;
max_treelevel=5;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; non uniform mesh correction: if 1 then wabbit synchronize redundant nodes
; at coarse blocks with data from fine blocks [ 1 | ... ]
non_uniform_mesh_correction=1;
; coarsening indicator to be used in mesh adaptation
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
coarsening_indicator=threshold-state-vector;threshold-vorticity;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=0;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1 1 1 0;





[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=6;
; how are the fields labeled?
field_names=rho Ux Uy p vort mask;


[Time]
; final time to reach in simulation
time_max=2e-5;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium
CFL=2;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=;
; write time for output
write_time=1e-5;
; method to calculate time step [ fixed | CFL_cond | lvl_fixed ]

; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=;0.2e-6;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.01;

; butcher_tableau
; use your butcher_tableau for the Runge Kutta time step function
; e.g. RK4:
; butcher_tableau=(/ 0.0 0.0 0.0 0.0 0.0
; 0.5 0.5 0.0 0.0 0.0
; 0.5 0.0 0.5 0.0 0.0
; 1.0 0.0 0.0 1.0 0.0
; 0.0 0.16666666666666666 0.33333333333333331 0.33333333333333331  0.16666666666666666 /)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=navier_stokes;
; initial condition can be set by the physics module or read from file. in the former
; case details are given in the corrsponding subsection for each physics module.
; [ physics-module | read_from_files]
initial_cond=physics-module;
; input files that contain treecode, time, iteration, number of blocks and initial field
input_files=rho_000000141000.h5 Ux_000000141000.h5 Uy_000000141000.h5 p_000000141000.h5;



[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
L_sponge=0.02;
C_sponge=1e-5;

[Navier_Stokes]
; adiabatic coef
gamma_=1.4;
; specific gas constant
Rs=287.0;for air
; prandtl number
Pr=0.71;
; dynamic viscosity
mu0=1.71e-5;
; dissipation, 1=on, ...=off
dissipation=1;
; case studies of the NStokes module:
; + simple_geometry: [triangle | cylinder | rhombus]
; + funnel
; + shock_tube: [sod_shock_tube| standing_shock]
; + no: [pressure_blob | shear_layer]
case=simple_geometry;

[Initial_Values]
inicond=mask;simple-shock;mask;zeros;pressure_blob;
inicond_width=0.01;
initial_pressure=21756.0;
initial_velocity=430.00 0.0 0;
initial_temperature=298.15;
initial_density=0.6589;

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; boundary condition [ periodic ]
boundary_cond=periodic;
; filter type [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock]
filter_type=bogey_shock;
; filter frequency (note: set to very high value to dissable filtering
filter_freq=1;
; bogey shock detector threshold
r_th=1e-5;
!if threshold is reached bogey-filter will be switch on [tanh,abs]
switch=tanh;
! bogey-filter detection method
detector_method=divU;
! write out sigma for every n filter iterations (if 0 then sigma is not written out)
save_filter_strength=1;


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with all
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness.
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=1e-5;


[simple_geometry]
; NOTE: Those parameters are used only in Nstokes and only if [Navier_Stokes]::case=simple_geometry
; + for implementation of the geometry we use the volume penalization method
; (see: https://doi.org/10.1016/j.compfluid.2008.07.003, Boiron 2008)
;     - Ceta is read from [VPM]::Ceta
;     - make sure [VPM]::penalization=1;
;     - for the in and out-flow we use sponges which mimic dirichlet BC
;       all Spong parameter are read form [Sponge]
;-------------------------------------------------------------------------------
; what geometry is it?
geometry=triangle; [ cylinder | rhombus | triangle ]
; center coordinate of object
x_cntr=0.20 0.5 0;
; [triangle,rhombus]: angle between symmetry axis and triangle side (in degrees please)
angle=10;
; [triangle,rhombus,cylinder]: length or diameter of the object
length=0.02;
; + initial condition:
; availabel intial conditions are [mask | moving-shock | pressure-blob | zeros]
; the initial values are taken form [initial_values]
; + note: inicond mask sets u=u0 and rho=rho0 and p=p0 for the sponge reference values
; -------------------------------------------------------------------------------
; FREE OUTLET for shock geometries
; if free_outlet_wall is true a free outlet sponge will be added to
; the domain boundary perpendicular to the
; the inlet flow direction (x-direction)
free_outlet_wall=1;
