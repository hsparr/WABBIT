; WABBIT parameter file template.
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)

[Domain]
; 2D or 3D problem?
dim=2;
domain_size=0.1786 0.111 0;


[Blocks]
; size of each block, should be odd (17, 33, 65 etc)
number_block_nodes=33;129;17;33;
; ghost nodes for each block
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=1e-3;1e-4;
; treelevel bounds
max_treelevel=3;
min_treelevel=3;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=0;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=0;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; non uniform mesh correction: if 1 then wabbit synchronize redundant nodes
; at coarse blocks with data from fine blocks [ 1 | ... ]
non_uniform_mesh_correction=1;




[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=8;
; how are the fields labeled?
field_names=rho Ux Uy p vort mask sigmax sigmay;



[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=20;
; and every tsave physical time units (leave empty to disable)
tsave_stats=;

[Time]
; final time to reach in simulation
time_max=0.00001;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium
CFL=1;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=;1;
; write time for output
write_time=0.00001;
; method to calculate time step [ fixed | CFL_cond | lvl_fixed ]

; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=2e-7;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.01;

; butcher_tableau
; use your butcher_tableau for the Runge Kutta time step function
; e.g. RK4:
; butcher_tableau=(/ 0.0 0.0 0.0 0.0 0.0
; 0.5 0.5 0.0 0.0 0.0
; 0.5 0.0 0.5 0.0 0.0
; 1.0 0.0 0.0 1.0 0.0
; 0.0 0.16666666666666666 0.33333333333333331 0.33333333333333331  0.16666666666666666 /)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=navier_stokes;
; initial condition can be set by the physics module or read from file. in the former
; case details are given in the corrsponding subsection for each physics module.
; [ physics-module | read_from_files]
initial_cond=physics-module;
; input files that contain treecode, time, iteration, number of blocks and initial field
input_files=rho.h5 Ux.h5 Uy.h5 p.h5;



[Navier_Stokes]
; adiabatic coefficient
gamma_=1.4;
; specific gas constant
Rs=307.94;for air
; prandtl number
Pr=0.71;
; dynamic viscosity
mu0=1e-8;
; dissipation, 1=on, ...=off
dissipation=1;
; the navier stokes module provides different scenarios (/cases), with special initial conditions
; penalization, boundary conditions, etc. Not all cases have the same specifications, therefore we
; have to distinguish between them:
; [funnel, shock_test, pressure_blob, simple_geometry ]
case=funnel;


[Initial_Values]
inicond=case;
; initial conditions for the different szenarios:
; 1.)mask:
;	  inside penalized volume: velocity u=0,
;                            pressure p=rho_0 Rs T_0,
;   outside: velocity u=u_0 and pressure p=p_0;
; 2.)zeros:
;    sets initial velocitys to 0 regardles of initial_velocity
; 3.)pressure_blob
; 	 pressure blob with diameter inicond_width
; 4.)sod_shock_tube
; 	 sets initial conditions according to [Sod,1978]
; 5.)shear_layer
; 	 set initial conditions (rho_0,u_0,p_0) and the shear layer width from inifile;
; 6.)simple-shock
;    produces standing shock (1D) in x direction, specify inicond_(pressure,velocity,density);
; 6.)moving-shock
;    produces moving shock (1D) in x direction with nomr(initial_velocity) specifies shock speed
;    specify inicond_(pressure,velocity,density,inicond_width)
;    inicond_width is the location of the shock x=inicond_width*Lx
inicond_width=0.01;
initial_pressure=10000.0;
initial_velocity=0.0 00.0 0;
initial_temperature=300;
initial_density=0.3;

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; boundary condition [ periodic ]
boundary_cond=periodic;
; filter type [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock]
filter_type=bogey_shock;
; filter frequency (note: set to very high value to dissable filtering
filter_freq=1;
; bogey shock detector threshold
r_th=1e-5;
!if threshold is reached bogey-filter will be switch on [tanh,abs]
switch=tanh;
! bogey-filter detection method
detector_method=divU;
! write out sigma for every n filter iterations (if 0 then sigma is not written out)
save_filter_strength=1;



[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with all
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness.
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=1e-7;
; geometry
geometry=funnel;
; center coordinate for cylinder
x_cntr=0.05 0.05 0;
; radius of cylinder
radius=0.025;

[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=1;
L_sponge=0.1;


[MPI]
; method for data exchange [ RMA_lock_unlock_get | RMA_lock_unlock_put | Non_blocking_Isend_Irecv ]
mpi_data_exchange=Non_blocking_Isend_Irecv;


[Timing]
; If set to 1, the code will issue a single XXXXXtimes.dat file per proc, where one
; can examine individual mpiranks manually. this file is written in every iteration.
; the IO cost on some machines can be substantial if many cores are used: better disable
; this functionality then. default is 0.
write_individual_timings=0;

[Debug]
; check if the ghost node synchronization gives the right order, on a random
; grid. this test costs some CPU time but no memory. It is done only once at startup.
test_ghost_nodes_synch=1;
test_treecode=0;
; internal testing routine for the ghost nodes: allocates HUGE amounts of memory
check_redundant_nodes=0;

[funnel]

outer_diameter=0.05;
maximal_inner_diameter=0.03;
minimal_inner_diameter=0.01;
Number_of_plates=21;
Number_of_focus_plates=40;
Temperatur_of_plates=200;
jet_diameter=0.004;
inlet_velocity=300 0 0;
inlet_density=0.645;
inlet_pressure=32000;
outlet_pressure=1000.0;
pump_speed=150.17;
plates_thickness=0.0044;
first_plate_thickness=0.012;
distance_between_plates=0.0028;
diameter_slope_per_plate=0.004;
