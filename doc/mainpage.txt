!> \mainpage (W)avelet (A)daptive (B)lock-(B)ased solver for (I)nteractions with (T)urbulence
!> \section intro_sec Introduction
!> \image html rhs.svg  width=600
!> \section install_sec Installation
!> \subsection step1 Clone from GitHub
!!
!! 	       	   $ git clone https://github.com/mario-sroka/WABBIT
!!
!> \subsection step2 Run make
!! 	  1. choose compiler with FC option (to v0.2): \n
!!
!!                 $ make FC=[gfortran|ifort]
!!
!!	  2. choose compiler with FC option (from v0.3): \n
!!
!!                 $ make FC=[mpif90]
!!
!> \subsection step3 Run WABBIT
!! customize .ini-file and rename file to [your_filename.ini], run WABBIT with option for dimension and .ini-file name:
!!
!!		   $ wabbit [your_filename.ini]
!!
!> \subsection ste4p HDF5 Libary
!! This is a short example (/working practice) of how to install hdf5 libary
!! (Tested for version hdf5-1.10.1).
!!        1. download source code from <a href="https://www.hdfgroup.org/downloads/hdf5/source-code/">hdf5</a>
!!        2. open terminal and follow:\n
!!
!!                 $ gunzip < hdf5-X.Y.Z.tar.gz | tar xf -
!!                 $ cd hdf5-X.Y.Z
!!                 $ ./configure --prefix=path_2_build_dir --enable-fortran --enable-parallel
!!                 $ make
!!                 $ make check                # run test suite.
!!                 $ make install
!!                 $ make check-install        # verify installation.
!!
!!        3. export variables:\n
!!
!!                 $ HDF_ROOT=path_2_build_dir
!!                 $ export HDF_ROOT
!!                 $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${HDF_ROOT}/lib:${HDF_ROOT}/lib64
!!                 $ export LD_RUN_PATH=$LD_LIBRARY_PATH
!!
!> \section tutorials_sec Tutorials
!> \subsection tut1 General
!! After the installation of WABBIT it is possible to run simulations with the existing physics modules. For the different modules .ini-files can be found in the TESTING directory. These can be adapted and used for first simulations. After adapting the .ini-file a simulation can be started with
!!
!!		   $ wabbit [your_filename.ini]
!!
!! This can be adapted to start a parallel calculation.
!!
!! It is possible to add a new folder with the .ini-file and the WABBIT executable and start the simulation in this folder. Like this all outputs generated during the simulation will be added to this folder.
!!
!! For visulization of the results it is usefull to use the tool <a href="https://github.com/pseudospectators/mpi2vis">mpi2vis</a>
!!
!! Having installed mpi2vis and added the hdf2xmf.py-file to your binaries calculated results can be visualized by first running
!!
!!                 $ hdf2xmf.py
!!
!! and then viewing the created .xmf-files for example with paraview
!!
!!                 $ paraview ALL2.xmf
!!
!> \subsection tut2 Pressure Blob
!! This tutorial demonstrates the evolution of a Gaussian pressure blob of a given radius over time in a 2D environment. In this tutorial,
!! the Navier-Stokes equations are used as the physics model. To run the simulation, the general tutorial described above can be used after the ini file is modified.
!! The following ini file has to be used to create the desired results of a 2 D Gaussian pressure blob evolution:
!!
!!                 $  ############################################                                   ###############################################
!!                 $  ############################################ WABBIT 2 D PRESSURE BLOB TUTORIAL ###############################################
!!                 $  ############################################               INI FILE            ###############################################
!!                 $  ############################################         version: 17/09/2018       ###############################################
!!                 $  ------------------------------------------------------------------------------------------------------------------------------
!!                 $  [Domain]
!!                 $  ; 2D or 3D problem?
!!                 $  dim=2;
!!                 $  domain_size=6 3;
!!                 $
!!                 $  [Blocks]
!!                 $  ; size of each block, should be odd (17, 33, 65, 129 etc)
!!                 $  ; give either one value (for same Bs in x,y,z) or as many (different) values as dim
!!                 $  number_block_nodes=17;
!!                 $  ; ghost nodes for each block
!!                 $  number_ghost_nodes=4;
!!                 $  ; number of equations / components of state vector. Note you have to properly
!!                 $  ; adjust this value for the physics module that you use.
!!                 $  number_data_fields=4;
!!                 $  ; threshold value for thresholding wavelet coefficients
!!                 $  eps=1e-3;1e-4;
!!                 $  ; treelevel bounds
!!                 $  max_treelevel=4;
!!                 $  min_treelevel=1;
!!                 $  ; switch for mesh adaption, 1=on, ...=off
!!                 $  adapt_mesh=1;
!!                 $  ; adaptive initial conditon? i.e. create grid to respect error bounds
!!                 $  ; default is same value as adapt_mesh
!!                 $  adapt_inicond=1;
!!                 $  ; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
!!                 $  ; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
!!                 $  inicond_refinements=0;
!!                 $  ; block distribution for balancing (also used for start distribution)
!!                 $  ; [equal | sfc_z | sfc_hilbert]
!!                 $  ; equal -> simple uniformly distribution
!!                 $  ; sfc_z  -> space filling curve -> z-curve
!!                 $  ; sfc_hilbert -> hilbert space filling curve
!!                 $  block_dist=sfc_hilbert;
!!                 $
!!                 $  [Saving]
!!                 $  ; TODO: maybe this section is clumsy and should be revised.
!!                 $  ; how many fields are you going to save?
!!                 $  N_fields_saved=5;
!!                 $  ; how are the fields labeled?
!!                 $  field_names=rho Ux Uy p vort;
!!                 $
!!                 $  [Time]
!!                 $  ; final time to reach in simulation
!!                 $  time_max=0.01;
!!                 $  ; number of time steps performed. if not set, default value is very large
!!                 $  nt=;
!!                 $  ; CFL criterium
!!                 $  CFL=;
!!                 $  ; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
!!                 $  write_method=fixed_time;
!!                 $  ; write frequency for output, choose very large number for disabling output on disk
!!                 $  write_freq=;
!!                 $  ; write time for output
!!                 $  write_time=0.0005;
!!                 $  ; method to calculate time step [ fixed | CFL_cond | lvl_fixed ]
!!                 $  ; fixed time step. if greater 0, then the time step is fixed no matter what.
!!                 $  ; default is 0.0, so not used.
!!                 $  dt_fixed=1e-5;
!!                 $  ; largest time step, if you want to set one. dt is always smaller than that, if the
!!                 $  ; value is greater 0. default is 0.0, so not used.
!!                 $  dt_max=0.0;
!!                 $
!!                 $  [Physics]
!!                 $  ; what physics module is used?
!!                 $  ; [ACM-new, ConvDiff-new, navier_stokes]
!!                 $  physics_type=navier_stokes;
!!                 $  ; initial condition can be set by the physics module or read from file. in the former
!!                 $  ; case details are given in the corresponding subsection for each physics module.
!!                 $  ; [ physics-module | read_from_files]
!!                 $  initial_cond=physics-module;
!!                 $
!!                 $  [Navier_Stokes]
!!                 $  ; adiabatic coefficient
!!                 $  gamma_=1.4;
!!                 $  ; specific gas constant
!!                 $  Rs=287.05         ;for air
!!                 $  ; prandtl number
!!                 $  Pr=0.71;
!!                 $  ; dynamic viscosity
!!                 $  mu0=1e-2;
!!                 $  ; dissipation, 1=on, ...=off
!!                 $  dissipation=1;
!!                 $  inicond=pressure_blob;
!!                 $  inicond_width=0.01;
!!                 $  initial_preasure=101330.0;
!!                 $  initial_velocity=0.0 0.0 0;
!!                 $  initial_temperature=200;
!!                 $  initial_density=1.645;
!!                 $
!!                 $  [Discretization]
!!                 $  ; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
!!                 $  order_discretization=FD_4th_central_optimized;
!!                 $  ; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
!!                 $  order_predictor=multiresolution_4th;
!!                 $  ; filter type [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | wavelet | bogey_shock]
!!                 $  filter_type=no_filter;
!!                 $
!!                 $  [Debug]
!!                 $  ; 1 ... debuging for time measurements and testcases is active,
!!                 $  debug=1;
!!                 $  ; unit tests
!!                 $  test_time_stepper=0;
!!                 $  test_spatial=0;
!!                 $  test_wavelet_comp=0;
!!                 $  test_ghost_nodes_synch=1;
!!                 $  test_treecode=0;
!!
!! After running the simulation, the physical fields are obtained. Using mpi2vis, the hdf files can be converted to xmf files that can be visualized using Paraview or similar software.
!! Subsequently, the density distribution is shown for the final time step:
!> \image html pressure_blob_density_no_filter.png width=600
!! plus its evolution over time:
!> \image html density.gif  width=600
-------------------------------------------------------------------------------------------------------------
!> \page structures Wabbit Structures
!> \section Treecode Treecode in 2D/3D
!! \image html treecode2d.svg "Treecode in 2D" width=400
!! \image html treecode3d.svg "Treecode in 3D" width=400
!! \section Data Data Structure
!! \subsection light Light Data Array
!! `integer(kind=ik) :: lgt_block(:,:)` \n
!!
!! m is the maximal mesh level
!! |1 ... m |m+1       |                                                     m+2|
!! |--------|----------|--------------------------------------------------------|
!! |treecode|mesh level|refinement status (-1 coarsen / 0 no change / +1 refine)|
!! \subsection heavy Heavy Data Arrays
!! \subsubsection block Block Data
!! `real(kind=rk) :: hvy_block(:,:,:,:)` \n
!!
!! This array is used for load balancing data exchange. \n
!!
!! |dimension 1,2,3             |dimension 3| dimension 4|
!! |----------------------------|-----------|------------|
!! |node data (with ghost nodes)|datafield  |block id    |
!!
!! \subsubsection work Work Data
!! `real(kind=rk) :: hvy_work(:,:,:,:)` \n
!!
!! This array is not used for data exchange. \n
!!
!! |dimension 1,2,3             |dimension 3             | dimension 4|
!! |----------------------------|------------------------|------------|
!! |node data (with ghost nodes)|RK stage and datafield  |block id    |
!!
!! \subsubsection neighbor Neighbor Data
!! `real(kind=rk) :: hvy_neighbor(:,:)` \n
!!
!! |1 ... m                                      |
!! |---------------------------------------------|
!! |neighbor block row number in light data array|
!!
!> \subsection neighborhood Neighborhood Relations


----------------------------------------------------------------------------------------------------------------
!> \page postprocessing Wabbit Postprocessing Tools
!! The existing postprocessing tools can be found in /LIB/POSTPROCESSING \n
!!
!! Type:
!!
!!     $ ./wabbit-post --help or wabbit-post --help --[one of the listed tools]
!!
!! to get more information from WABBIT
!!
!! \section sparse Sparse to Dense
!! \subsection Description
!! This tool can be used to generate a uniform mesh of one datafield saved in
!! hdf5 format. The user may decide whether he wants to upsample or downsample (or
!! something in between) the grid.
!! \image html sparse_to_dense.svg "Sparse to Dense" width=400
!! \subsection Run
!!
!!     $ ./wabbit-post --sparse-to-dense source.h5 target.h5 target_treelevel order-predictor(2 or 4)
!!
!! where source.h5 is the input file, target.h5 is the file where the user
!! wants the output to be saved, target_treelevel is the desired level and
!! order-predictor the interpolation order (for upsampling)
!! \subsection Implementation
!!     1. Get blocksize and maximal treelevel of the saved datafield
!!     2. Compare maximal treelevel to desired treelevel and set
!!params%max_treelevel to the greater one
!!     3. Allocate data
!!     4. Read data from source.h5
!!     5. First coarsen (check where coarsening is actually needed: if
!! (max_active_level( lgt_block, lgt_active, lgt_n )>level)
!!     6. Then refine (check where refining is actually needed: if
!! (min_active_level( lgt_block, lgt_active, lgt_n )<level)
!!     7. Write data to target.h5
!!
!! \section keys Keyvalues
!! This tool can be used for testing. It reads a datafield from an existing
!! hdf5-file, generates a .key file containing several keyvalues and can then
!! be used to compare to two .key files
!! \subsection gen Generate keyvalues
!! \subsubsection Description
!! Loads the specified *.h5 file and creates a *.key file that contains
!! min / max / mean / L2 norm of the field data. This is used for testing
!! so that we don't need to store entire fields but rather the *.key only
!! \subsubsection Run
!!
!!     $ ./wabbit-post --keyvalues filename.h5
!!
!! \subsection com Compare keyvalues
!! Compares two .key files, prints out the error on the screen and gives back
!! an exit code
!! \subsubsection Run
!!
!!     $ ./wabbit-post --compare-keys old.key new.key
!!
!! \section vor Compute vorticity
!! This tool can be used for subsequent calculation of the vorticity from a
!! given velocity field.
!! \image html vor.jpg "Vorticity field" width=400
!!
!! \subsection run Run
!!
!!     $ ./wabbit-post --vorticity source_ux.h5 source_uy.h5 derivative-order(2 or 4)
!!     $ ./wabbit-post --vorticity source_ux.h5 source_uy.h5 source_uz.h5 derivative-order(2 or 4)
!!
!!
!! where derivative order is the order of the finite differences scheme
!!(second or fourth)
---------------------------------------------------------------------------------------------------------

!> \page testing Wabbit Testing Tools
!! \section Description
!! The existing tests can be found in /TESTING. \n
!!
!! For each test, we have an .ini file (with values set as time, physics etc.) and
!! .ref files where the keyvalues of these simulations are stored as reference
!! values. To check whether the current version of the code still gives the
!! same results we generate new .key files and compare them to the old ones. \n
!!
!!
!! To add a new test you may create a folder in one of the existing physics
!! folders (TESTING/acm, TESTING/navier-stokes, ...) or - for a new right hand
!! side - you may create a new physics folder. You can then put your .ini file
!! and your reference files (containing the keyvalues, see also \ref keys)
!! inside this folder, write a shell script similar to
!! e.g. /TESTING/acm/acm_cyl/acm_cylinder.sh and add it to
!! /TESTING/runtests.sh
!! \section Run
!!
!!     $ make test
!!
!!
