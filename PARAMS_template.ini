;#########################################################################################
;#########################################################################################
;######################## WABBIT PARAMETER FILE TEMPLATE #################################
;#########################################################################################
; if you add new parameters, add them here.
; note values have to be declared "value=0;", with equal sign (=) and semicolon (;)
;#########################################################################################
;#########################################################################################
[Domain]
; 2D or 3D problem?
dim=2;
; box size of computational domain. [Lx Ly Lz]
domain_size=1 1;
; synchronization (on/off)on [x y z] domain boundaries
; (off (NON-PERIODIC): 0/false/yes | on (PERIODIC): 1/true/no)
periodic_BC=1 1;


[Blocks]
; size of each block, must be odd (17, 33, 65 etc)
number_block_nodes=17;
; ghost nodes for each block. It is possible that in current versions, one can only
; set even values
number_ghost_nodes=4;
; number of equations / components of state vector. Note you have to properly
; adjust this value for the physics module that you use.
; ACM: 3 (2D), 4 (3D)
; Convection: 1 (2D /3D)
number_equations=4;
; threshold value for thresholding wavelet coefficients
eps=1e-3;1e-4;
; treelevel bounds
max_treelevel=6;
min_treelevel=1;
; switch for mesh adaption, 1=on, ...=off
adapt_mesh=1;
; adaptive initial conditon? i.e. create grid to respect error bounds
; default is same value as adapt_mesh
adapt_inicond=1;
; in some situations, it is necessary to create the intial grid, and then refine it for a couple of times.
; for example if one does non-adaptive non-equidistant spatial convergence tests. default is 0.
inicond_refinements=0;
; block distribution for balancing (also used for start distribution)
; [equal | sfc_z | sfc_hilbert]
; equal -> simple uniformly distribution
; sfc_z  -> space filling curve -> z-curve
; sfc_hilbert -> hilbert space filling curve
block_dist=sfc_hilbert;
; it can be expensive to balance the load and cheaper to live with a slight imbalance.
; Therefore, you can call loadbalancing only every couple of time steps. This parameter
; should affect only the computational cost and not the result.
loadbalancing_frequ=1;
; coarsening indicator to be used in mesh adaptation [threshold-state-vector,random,threshold-vorticity]
; threshold-state-vector: evaluates wavelet criterion on components of state vector. specify below which ones.
; threshold-vorticity: evaluates wavelet criterion on vorticity
;random
;randomly coarse some blocks. used for testing. note we tag for coarsening
;only once in the first iteration
coarsening_indicator=threshold-state-vector;
; use normalization for eps or not? normalization is done with INFTY norm currently. default
; is no normalization (0). ATTENTION works only for ACM currently (TODO!)
eps_normalized=1;
; which components to use for coarsening_indicator? default is all components.
; active only if coarsening_indicator=threshold-state-vector. select the components, set as
; many as number_equations
threshold_state_vector_component=1 1 0;
; if this flag is set (1), then blocks on max level have to coarsen, even if their
; details are significant. This is equivalent to ensuring dealiasing. Hence, if set to 1,
; wabbit will evaluate the right hand side of your equation on max_treelevel, but in the mesh
; coarsening it will, regardless of the solution, downsample the result to max_treelevel-1. Your
; expected precision is thus max_treelevel-1, but the computational cost (derivatives and timestep)
; is on max_treelevel.
force_maxlevel_dealiasing=0;
; if desired, we perform more than one time step
; before adapting the grid again. this can further reduce the overhead of adaptivity
; Note: the non-linear terms can create finer scales than resolved on the grid. they
; are usually filtered by the coarsening/refinement round trip. So if you do more than one time step
; on the grid, consider using a filter. default is "1", which is the classical scheme
N_dt_per_grid=1;


[Time]
; final time to reach in simulation
time_max=1.0;
; maximum walltime allowed for simulations (in hours). The run will be stopped if this duration
; is exceeded. This is useful on real clusters, where the walltime of a job is limited, and the
; system kills the job regardless of whether we're done or not. If WABBIT itself ends execution,
; a backup is written and you can resume the simulation where it ended
walltime_max=999.9;
; number of time steps performed. if not set, default value is very large
nt=;
; CFL criterium (velocity)
CFL=1.0;
; CFL critierum for penalization (dt<CFL_eta*C_eta), if VPM is used. For RungeKuttaGeneric schemes, the constant
; has to be < 1.0 (otherwise the code is unstable). For krylov schemes, it can be greater
; 1, but be careful about the error.
CFL_eta=0.99;
; write method (write with fixed frequency or time ) [ fixed_freq | fixed_time ]
write_method=fixed_time;
; write frequency for output, choose very large number for disabling output on disk
write_freq=2;
; write time for output
write_time=100.05;
; fixed time step. if greater 0, then the time step is fixed no matter what.
; default is 0.0, so not used.
dt_fixed=0.0;
; largest time step, if you want to set one. dt is always smaller than that, if the
; value is greater 0. default is 0.0, so not used.
dt_max=0.0;
; time-step method. can be either "RungeKuttaGeneric" or "Krylov". In the former case,
; any explicit Runge-Kutta scheme can be set by using the Butcher-Tableau. (RK4 is default) In the latter,
; the number of Krylov subspaces M_krylov can be set.
; [ RungeKuttaGeneric, Krylov ]
time_step_method=RungeKuttaGeneric;
; if time_step_method is krylov, then you can specify the dimension of the krylov subspace
; below. If dynamic subspace dimensions are used, we interpret this number as the maximum
; number of spaces admissible (the method requires a lot of memory in general)
M_krylov=12;
; fixed or dynamic krylov subspace dimension:
; [ fixed, dynamic ]
krylov_subspace_dimension=fixed;
; if dynamic subspace dimensionality is used, provide the residuum threshold here. Note this is
; in general not an exact measure for the error, but rather a good indicator.
krylov_err_threshold=1.0e-3;
; butcher_tableau
; use your butcher_tableau for the Runge Kutta time step function
; e.g. RK4:
; butcher_tableau=(/ 0.0 0.0 0.0 0.0 0.0
; 0.5 0.5 0.0 0.0 0.0
; 0.5 0.0 0.5 0.0 0.0
; 1.0 0.0 0.0 1.0 0.0
; 0.0 0.16666666666666666 0.33333333333333331 0.33333333333333331  0.16666666666666666 /)


[Physics]
; what physics module is used?
; [ACM-new, ConvDiff-new, navier_stokes]
physics_type=navier_stokes;
; decide if you want to start from a given configuration (i.e. Statevector)
; 1:true, 0:false and we start from iniconditions
read_from_files=0;
; if read_from_files is true, WABBIT will try to start from the given files
input_files=rho_000000000141.h5 Ux_000000000141.h5 Uy_000000000141.h5 p_000000000141.h5;


[Saving]
; TODO: maybe this section is clumsy and should be revised.
; how many fields are you going to save?
N_fields_saved=6;
; how are the fields labeled?
field_names=rho Ux Uy p vort mask;


[Statistics]
; save every nsave time steps (leave empty to disable)
nsave_stats=10;
; and every tsave physical time units (leave empty to disable)
tsave_stats=0.20;


[ACM-new]
; speed of sound, used also for the CFL condition. The characteristic velocity is
; u_eigen = umax+ sqrt(umax**2 + c0**2)
c_0=50.0;
; the speed of sound is usually a constant, but for numerics it might be a good idea to interpret
; it as a mach number, relative to the largest velocity in the field. In this case, c0 = max(u)*MachNumber
; and c0(t). The scaling is used if a MachNumber>0.0 is given; otherwise, c0 is a constant. Of course, if
; MachNumber is given, the above value of c_0 is useless.
MachNumber=;
; viscosity. We also respect the time step constraint imposed by explicit diffusion
nu=1e-2;
; damping term for pressure, see [Ohwada, Asinari, JCP2010]
gamma_p=1;
; use mean flow forcing or not
forcing=1;
; what method to use for forcing? available: accelerate / none / fixed
; specifiy at least Dim entries for each component
forcing_type=accelerate fixed none;
; if mean flow forcing is used, this is the values for the mean velocities:
u_mean_set=0.0 0.0 0.0;
; initial condition
inicond=meanflow;
; the mean pressure has no meaning in incompressible fluids, but sometimes it can
; be nice to ensure the mean is zero, e.g., for comparison wit other codes. if set to true
; wabbit removes the mean pressure at every time step.
p_mean_zero=no;
; if inicond= pressure-blob
beta=0.05;


[Sponge]
; sponge term, used in ACM module to mimick outflow conditions for pressure waves
use_sponge=0;
; shape of the sponge. the tradional form (default) is "rect", but we have a smoothed
; version with round corners which is called "p-norm". It has the parameter p_sponge,
; which controls the roundedness of corners. The function is inspired by the p-norm
; ((x-x0)**p + (y-y0)**p + (z-z0)**p)**1/p [https://de.wikipedia.org/wiki/P-Norm]
; a good compromise is p=20.0
sponge_type=rect;
; p-sponge is used only in conjunction with sponge_type=p-norm;
p_sponge=20.0;
; thickness of sponge layer (in physial units)
L_sponge=0.1;
; sponge damping constant
C_sponge=1.0e-2;


[ConvectionDiffusion]
; how many scalar fields do you want to solve? should be the same as number_equations
; above.
N_scalars=1;
; note you need to specify one value per scalar field for ALL the below parameters
; viscosity. if nu<1.0e-10 (or 0.0), diffusion is disabled.
nu=0.0e-6;
; initial condition for the scalar(s)
inicond=blob;
blob_width=0.01;
; position of blob
x0=0.5;
y0=0.75;
z0=0;
; velocity field for transportation, [swirl,constant]
velocity=swirl;
; if the velocity profile is the swirl test, one sometimes would want to compute
; an incomplete swirl, i.e. Tmax and Tswirl to not agree. Set T_swirl here if you want
; the default is the same as the simulation duration
T_swirl=5.0;
; if constant velocity, these are the values (one per scalar)
u0x=1.0;
u0y=1.0;
u0z=0.0;
; boundary condition:
; Note: only used in case of non periodic BC
boundary_type=constant-inflow;
; constant-inflow: specifiy the N_scalars of the
; boundary values at the inflow
phi_boundary=0.0;



[Navier_Stokes]
; choose your coordinate_system
;  + default cartesian 2D/3D = "cartesian"
;  + cylindrical 2D = "cylindrical"
Coordinate_system=cartesian;
; adiabatic coefficient
gamma_=1.4;
; specific gas constant
Rs=287.05         ;for air
; prandtl number
Pr=0.71;
; dynamic viscosity
mu0=1e-2;
; dissipation, 1=on, ...=off
dissipation=1;
; case studies of the NStokes module:
; + simple_geometry: [triangle | cylinder | rhombus]
; + funnel
; + shock_tube: [sod_shock_tube| standing_shock | moving_shock]
; + no: [pressure_blob | shear_layer]
case=funnel;



[Initial_Values]
inicond=pressure_blob;
; initial conditions for the different szenarios:
; 1.)mask:
;	  inside penalized volume: velocity u=0,
;                            pressure p=rho_0 Rs T_0,
;   outside: velocity u=u_0 and pressure p=p_0;
; 2.)zeros:
;    sets initial velocitys to 0 regardles of initial_velocity
; 3.)pressure_blob
; 	 pressure blob with diameter inicond_width
; 4.)sod_shock_tube
; 	 sets initial conditions according to [Sod,1978]
; 5.)shear_layer
; 	 set initial conditions (rho_0,u_0,p_0) and the shear layer width from inifile;
; 6.)simple-shock
;    produces standing shock (1D) in x direction, specify inicond_(pressure,velocity,density,width);
;    inicond_width quantifies the shock location in x direction
; 7.)moving-shock
;    produces moving shock (1D) in x direction with initial_velocity(1) specifies shock speed
;    specify inicond_(pressure,velocity,density,inicond_width)
;    inicond_width is the location of the shock
inicond_width=0.01;
initial_pressure=101330.0;  p_0
initial_velocity=50.0 0.0 0; u_0
initial_temperature=200;     T_0
initial_density=1.645;      rho_0

[Discretization]
; order of derivatives [ FD_2nd_central | FD_4th_central_optimized ]
order_discretization=FD_4th_central_optimized;
; order of refinement predictor [ multiresolution_4th | multiresolution_2nd ]
order_predictor=multiresolution_4th;
; filtering of equations. NOTE: the filters are PHYSICS MODULE SPECIFIC! Hence it depends on the module
; which values you can set here.
; cNS: [no_filter | explicit_5pt | explicit_7pt | explicit_9pt | explicit_11pt | bogey_shock | wavelet_filter]
; ACM: [no_filter | wavelet_filter ]
; ConvDiff: not implemented
filter_type=;
; filter frequency (note: set filter to no_filter if you want to disable filtering completely)
; Note our clumsy nomenclature: we mean filtering every "filter_freq" time steps
filter_freq=10;
; bogey shock detector threshold
r_th=1e-5;
; if threshold is reached bogey-filter will be switch on [tanh,abs]
switch=tanh;
; bogey-filter detection method
detector_method=divU
; write out sigma for every n filter iterations (if 0 then sigma is not written out)
save_filter_strength=1


[VPM]
; Volume penalization method to take obstacles into account without adapting the
; grid. Penalization is an equation-dependent addon. It can not be used with any
; RHS, if the RHS does not support it.
; flag for penalization (0/1)
penalization=1;
; smooth mask for penalization term [0,1]. If the obstacle moves, this flag should
; be set, and in static cases as well. hard masks with only 0 and 1 are deprecated but
; included for completeness. Note some mask functions may ignore this flag (the insects for example)
smooth_mask=1;
; penalization factor. Can be seen as porosity, so smaller values = harder walls
; Note for explicit time integration, dt < C_eta
C_eta=1e-3;
; The mask geometry is PHYSICS MODULE SPECIFIC! Hence it depends on the module which values you can set.
; cNS: [funnel,triangle,cylinder,rhombus]
; ACM: [none,Insect,cylinder,two-cylinders] if "Insect", all other parameters are read from "Insect" section.
; ConvDiff: not implemented
geometry=triangle;
; center coordinate of object
x_cntr=0.5 0.5 0;
; [triangle,rhombus]: angle between symmetry axis and triangle side (in degrees please)
angle=30;
; [triangle,rhombus,cylinder]: length or diameter of the object
length=0.3


[BRIDGE]
; type 1 if a bridge shell be created and 0 if not
connect_with_bridge=0;
; The following parameters are only needed if there is a bridge

; Usage of a common MPI_comm_world  (1,yes,true,T=true / 0,no,false,F=false)
bridgeCommonMPI=0;
; If bridgeFluidMaster is true WABBIT is seen as the master and will
; spawn (split off) the processes of the other MPI_WORLD
;  (1,yes,true,T=true / 0,no,false,F=false)
bridgeFluidMaster=1;
; Command to use to launch the particle program (name of the executable)
particleCommand=./pig;


[Insects]
; NOTE: Those parameters are used only in ACM and only if VPM::geometry=Insect
;-------------------------------------------------------------------------------
; Body geometry
x_pivot_r=0.0 0.0 0.0; (vector) position of right wing in body system
x_pivot_l=0.0 0.0 0.0; (vector) position of left wing in body system
; Body (types: ellipsoid, drosophila, nobody)
BodyType=nobody;
HasDetails=all; legs; antennae_proboscis; no;
RightWing=yes;
LeftWing=no;
b_body=0.2;
L_body=1.0;
R_head=0.20;
R_eye=0.075;
x_head=0.0 0.0 0.0; (vector)
x_eye_r=; (vector)
x_eye_l=; (vector)
J_body_yawpitchroll=1.0 1.0 1.0; Body moment of inertia in body reference frame
mass=1.0; total mass of animal
gravity=1.0; negative: falling in negative z-direction
;-------------------------------------------------------------------------------
; Wing geometry (Shapes: rectangular, TwoEllipses, drosophila, drosophila_mutated,
; drosophila_sandberg, drosophila_maeda, flapper_sane)
WingShape=suzuki;
b_top=0.1; if WingShape=TwoEllipses, that's thickness of the forward one
b_bot=0.3; if WingShape=TwoEllipses, that's thickness of the backward one
L_chord=1.0;
L_span=1.0;
WingThickness=0.0417; # FOR suzukis TESTCASE, THIS IS A CONSTANT!!
; wing inertia tensor (used to compute inertial power)
Jxx=0.0560;
Jyy=0.0031;
Jzz=0.0591;
Jxy=0.0061;
;-------------------------------------------------------------------------------
; Body motion
; motion of the body: (tethered, free_flight)
BodyMotion=tethered;
x0=2 2 2; initial (or tethered) position
v0=0 0 0; inital velocity
yawpitchroll_0=45.0 -45.0 0.0; initial (or tethered) orientation in degrees
eta0=-45.00; stroke plane angle in degrees
DoF=000000; x,y,z,yaw,pitch,roll DoF on=1 or off=0
;-------------------------------------------------------------------------------
; Wing motion
; (types: Drosophila_hovering_fry, Drosophila_hovering_maeda, flapper_sane,
; flapper_dickinson, takeoff, simplified, from_file, none)
FlappingMotion_right=suzuki;
FlappingMotion_left=suzuki;
; if flappingmotion=="from_file", which file to use?
infile=bumblebee_new_kinematics.ini;
;-------------------------------------------------------------------------------


[funnel]
; NOTE: Those parameters are used only in Nstokes and only if [Navier_Stokes]::case=Funnel
;-------------------------------------------------------------------------------
outer_diameter=0.05;
maximal_inner_diameter=0.03;
minimal_inner_diameter=0.0025;
Number_of_plates=41;
Temperatur_of_plates=50;
jet_diameter=0.001;
inlet_velocity=400 0;
inlet_density=0.545;
inlet_pressure=33000;
outlet_pressure=1000.0;
pump_speed=200;

plates_thickness=0.0011;
first_plate_thickness=0.003;
distance_between_plates=0.0025;
diameter_slope_per_plate=0.002;


[simple_geometry]
; NOTE: Those parameters are used only in Nstokes and only if [Navier_Stokes]::case=simple_geometry
; + for implementation of the geometry we use the volume penalization method
; (see: https://doi.org/10.1016/j.compfluid.2008.07.003, Boiron 2008)
;     - Ceta is read from [VPM]::Ceta
;     - make sure [VPM]::penalization=1;
;     - for the in and out-flow we use sponges which mimic dirichlet BC
;       all Spong parameter are read form [Sponge]
;-------------------------------------------------------------------------------
; what geometry is it?
geometry=triangle; [ cylinder | rhombus | triangle ]
; center coordinate of object
x_cntr=0.5 0.5 0;
; [triangle,rhombus]: angle between symmetry axis and triangle side (in degrees please)
angle=30;
; [triangle,rhombus,cylinder]: length or diameter of the object
length=0.3;
; + initial condition:
; availabel intial conditions are [mask | moving-shock | pressure-blob | zeros]
; the initial values are taken form [initial_values]
; + note: inicond mask sets u=u0 and rho=rho0 and p=p0 for the sponge reference values
; -------------------------------------------------------------------------------
; FREE OUTLET for shock geometries
; if free_outlet_wall is true a free outlet sponge will be added to
; the domain boundary perpendicular to the
; the inlet flow direction (x-direction)
free_outlet_wall=1;


[Shock_Tube]
; This section is only available for NStokes! It is used to validate
; the RHS euler equations and test the filter methods
; ------------------------------------------------------------------
; available shock configurations: [sod_shock_tube | moving-shock | standing-shock]
name=sod_shock_tube;
; + sod_shock_tube: see Publication Gary A Sod.,1987
; + moving-shock:   - is a shock front which moves with speed Mach_shock
;                   - the statevector left and right of the shock is computed
;                     from the Rankine-Hugoniot conditions
;                     (see F.Toro "Riemann solvers and numerical methods for fluid dynamics
;                     p. 98ff)
; + standing-shock: - is a standing shock wave
;-------------------------------------------------------------------
; for moving and standing shocks,
; you have to provide the values for the left side of the shock:
; the values of the right side are then computed from Rankine-Hugoniot conditions
pressure_left=101330.0;
velocity_left=50.0;
temperature_left=200;
density_left=1.645;
; and the speed of the shock wave for the moving shock
shock_wave_speed=500;
; normal vector of the shock front:
; the normal vectors are parallel to the Standard basis vectors
; choose 1 for the normal vector e_1 (x-direction)
;        2 for ...               e_2 (y-direction) etc.
shock_front_normal=2;


[Debug]
; 1 ... debuging for time measurements and testcases is active,
debug=1;
; If set to 1, the code will issue a single XXXXXtimes.dat file per proc, where one
; can examine individual mpiranks manually. this file is written in every iteration.
; the IO cost on some machines can be substantial if many cores are used: better disable
; this functionality then. default is 0.
write_individual_timings=0;
; unit tests
test_time_stepper=0;
test_spatial=0;
test_wavelet_comp=0;
test_ghost_nodes_synch=1;
test_treecode=0;
check_redundant_nodes=1;
